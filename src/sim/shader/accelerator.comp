#version 460

/*
 * This shader implements movement on an externally provided path along waypoints.
 * Supports gpu accelerated collision and connectivity detection. 
 */

layout (local_size_x = 32) in;

// Per shader invocation parameter
layout(push_constant) uniform Parameter {
    uint pass;
    float timeIncrement;
    uint interfaceCollisionSetOldOffset; // Points at start of previous tick collisions
    uint interfaceCollisionSetNewOffset; // Points at start of current tick collisions
} parameter;

// ------------------------------------------------------------------------------------
// Entities
// ------------------------------------------------------------------------------------

struct EntityDescriptor {
    vec2 pos;
    uint targetWaypointOffset;
    uint PADDING;
};

layout(set = 0, binding = 0) buffer bufEntity { EntityDescriptor entities[]; };

// ------------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------------

struct ConstantsDescriptor {
	float worldSizeX;
	float worldSizeY;

	uint nodeCount;
	uint entityCount;
	uint maxDepth;
    uint entityNodeCap;

    float interfaceRange;

    uint waypointBufferSize; // Number of waypoints per entity
    uint waypointBufferThreshold;

    uint maxInterfaceCollisionListCount;
    uint maxInterfaceCollisionSetCount;
    uint maxLinkEventCount;
};

layout(set = 0, binding = 1) buffer readonly bufConstants { ConstantsDescriptor constants[]; };

// ------------------------------------------------------------------------------------
// Waypoints
// ------------------------------------------------------------------------------------

struct WaypointDescriptor {
    vec2 pos;
    float speed;
    float PADDING;
};

layout(set = 0, binding = 2, std430) buffer readonly bufWaypoints { WaypointDescriptor waypoints[]; };


precision highp float;
precision highp int;

// ------------------------------------------------------------------------------------
// Quad Tree
// ------------------------------------------------------------------------------------

struct QuadTreeNodeDescriptor {
    float offsetX;
    float offsetY;
    float width;
    float height;

    uint entityCount;
    uint first; // the first entity in the linked list on this node

    uint parent;

    uint nextTL; // the top left child
    // Note: nextTL+1=nextTR, nextTL+2=nextBL, nextTL+3=nextBR
};

struct QuadTreeEntityDescriptor {
    uint node; // the entities "home node"
    uint next; // the next entity in the linked list on this "home node"
    vec2 pos;
};

layout(set = 0, binding = 3, std430) buffer bufQuadTreeNodes { QuadTreeNodeDescriptor quadTreeNodes[]; };
layout(set = 0, binding = 4, std430) buffer bufQuadTreeEntities { QuadTreeEntityDescriptor quadTreeEntities[]; };

// ------------------------------------------------------------------------------------
// Metadata
// ------------------------------------------------------------------------------------

struct IDPairDescriptor {
    uint ID0;
    uint ID1;
};

struct MetadataDescriptor {
    uint waypointRequestCount;
    uint interfaceCollisionListCount;
    uint interfaceCollisionSetCount;
    uint interfaceLinkUpListCount;
    uint interfaceLinkDownListCount;
    uint debug;
};

layout(set = 0, binding = 5, std430) buffer coherent bufMetadata { MetadataDescriptor metadata[]; };

// ------------------------------------------------------------------------------------
// Collision Detection
// ------------------------------------------------------------------------------------

layout(set = 0, binding = 6, std430) buffer bufInterfaceCollisionsList { IDPairDescriptor collisionsList[]; };

// ------------------------------------------------------------------------------------
// Events
// ------------------------------------------------------------------------------------

layout(set = 0, binding = 7, std430) buffer bufWaypointRequests { IDPairDescriptor waypointRequests[]; };

// ------------------------------------------------------------------------------------
// Connectivity Detection
// ------------------------------------------------------------------------------------

const uint InterfaceCollisionBlockSize = 63;
struct InterfaceCollisionBlockDescriptor {
    uint offset;
    uint colls[InterfaceCollisionBlockSize];
};

layout(set = 0, binding = 8, std430) buffer bufInterfaceCollisionsSet { InterfaceCollisionBlockDescriptor collisionsSet[]; };

layout(set = 0, binding = 9, std430) buffer bufLinkUpEvents { IDPairDescriptor linkUpEvents[]; };
layout(set = 0, binding = 10, std430) buffer bufLinkDownEvents { IDPairDescriptor linkDownEvents[]; };

// ------------------------------------------------------------------------------------
// Functions
// ------------------------------------------------------------------------------------

// Forward declarations
void collision_list_add(uint index0, uint index1);
void collision_set_add(uint index0, uint index1);

// Collision detection callback. Called only once per collision pair
void quad_tree_collision(uint index0, uint index1) {
    // Note: Each entity only has one interface for now
    //  => just use entity ID as interface ID

    if (parameter.pass == 2) {
        collision_list_add(index0, index1);
    } else {
        collision_set_add(index0, index1);
        atomicAdd(metadata[0].interfaceCollisionListCount, 1);
    }
}

// Returns <true> if the distance between <v1> and <v2> is less than <range>
//  Aka check wether <v1> and <v2> are colliding
bool quad_tree_in_range(vec2 v1, vec2 v2, float range) {
    v1 -= v2;
    return dot(v1, v1) <= range * range;
}

// Returns true if the AABB is entirely within this node
bool quad_tree_is_entity_within_node_AABB(uint nodeIndex, vec2 AABBmin, vec2 AABBmax) {
    return quadTreeNodes[nodeIndex].offsetX <= AABBmin.x  && 
        quadTreeNodes[nodeIndex].offsetY <= AABBmin.y && 
        (quadTreeNodes[nodeIndex].offsetX + quadTreeNodes[nodeIndex].width) >= AABBmax.x && 
        (quadTreeNodes[nodeIndex].offsetY + quadTreeNodes[nodeIndex].height) >= AABBmax.y;
}

// Checks if entity <index> collides with any entities on node <nodeIndex>
void quad_tree_check_entity_collisions_on_node(uint index, uint nodeIndex) {
    vec2 ePos = quadTreeEntities[index].pos;

    // Walk linked list
    uint curEntityIndex = quadTreeNodes[nodeIndex].first;
    uint count = quadTreeNodes[nodeIndex].entityCount;
    for (int i=0; i<count; i++) {
        // Prevent checking collision with our self and prevent duplicate entries by checking only for ones where our index is strictly smaller than the other
        if (index < curEntityIndex && quad_tree_in_range(quadTreeEntities[curEntityIndex].pos, ePos, constants[0].interfaceRange)) {
            quad_tree_collision(index, curEntityIndex);
        }

        curEntityIndex = quadTreeEntities[curEntityIndex].next;
    }
}

// ------------------------------------------------------------------------------------
// Collision Detection
// ------------------------------------------------------------------------------------

// Returns <true> if the entity <index> collision range reaches into the area of node <nodeIndex>
//  Aka it checks whether the entity may potentially have collisions with entities in this node
bool quad_tree_collision_on_node(uint index, uint nodeIndex) {
    float nodeOffsetX = quadTreeNodes[nodeIndex].offsetX;
    float nodeOffsetY = quadTreeNodes[nodeIndex].offsetY;

    vec2 ePos = quadTreeEntities[index].pos;
    vec2 aabbHalfExtents = vec2((quadTreeNodes[nodeIndex].width / 2), (quadTreeNodes[nodeIndex].height / 2));
    vec2 nodeCenter = vec2(nodeOffsetX, nodeOffsetY) + aabbHalfExtents;
    vec2 diff = ePos - nodeCenter;
    vec2 clamped = clamp(diff, vec2(-aabbHalfExtents.x, -aabbHalfExtents.y), aabbHalfExtents);
    vec2 closest = nodeCenter + clamped;

    return quad_tree_in_range(closest, ePos, constants[0].interfaceRange);
}

/**
 * Checks for collisions inside the constants[0].interfaceRange with other entities.
 *  Will invoke the callback 'quad_tree_collision(index, otherIndex)' for every found collision.
 *  Makes sure to avoid duplicates. Every collision is only reported once.
 **/
void quad_tree_check_collisions(uint index) {
    // Ascend and find common parent node
    uint startNodeID = quadTreeEntities[index].node; // start at home node
    vec2 AABBmin = vec2(quadTreeEntities[index].pos.x - constants[0].interfaceRange, quadTreeEntities[index].pos.y - constants[0].interfaceRange);
    vec2 AABBmax = vec2(quadTreeEntities[index].pos.x + constants[0].interfaceRange, quadTreeEntities[index].pos.y + constants[0].interfaceRange);
    AABBmin.x = max(AABBmin.x, 0); // clamp AABB to map borders
    AABBmin.y = max(AABBmin.y, 0);
    AABBmax.x = min(AABBmax.x, constants[0].worldSizeX);
    AABBmax.y = min(AABBmax.y, constants[0].worldSizeY);
    while (!quad_tree_is_entity_within_node_AABB(startNodeID, AABBmin, AABBmax)) {
        startNodeID = quadTreeNodes[startNodeID].parent;
    }

    if (quadTreeNodes[startNodeID].first < constants[0].entityCount)
    { // start node is a leaf node => just check and done
        quad_tree_check_entity_collisions_on_node(index, startNodeID);
        return;
    }

    // Descent and test all neighboring nodes
    // At this point we know that startNodeID is an internal node => step down
    uint previous = quadTreeNodes[startNodeID].nextTL;
    uint nodeID = quadTreeNodes[startNodeID].nextTL;
    while (true)
    {
        if (previous != quadTreeNodes[nodeID].nextTL + 3 && // Did not just step up
            quadTreeNodes[nodeID].entityCount > 0 && // There are entities in this node
            quad_tree_collision_on_node(index, nodeID)) // There could be collisions in this node
        {
            if (quadTreeNodes[nodeID].first >= constants[0].entityCount) {
                // Its an internal node => step down
                previous = nodeID;
                nodeID = quadTreeNodes[nodeID].nextTL;
                continue;
            } else {
                // Its a leaf node => check entities
                quad_tree_check_entity_collisions_on_node(index, nodeID);
            }
        }
        
        // Advance
        previous = nodeID;
        if (nodeID % 4 == 0) {
            // We are in a BR node => step up
            nodeID = quadTreeNodes[nodeID].parent;
        } else {
            nodeID++; // next sibling
        }

        if (nodeID == startNodeID) {
            // reached start node
            return; // done
        }
    }
}

// ------------------------------------------------------------------------------------
// Connectivity Detection
// ------------------------------------------------------------------------------------

void collision_list_add(uint index0, uint index1) {
    uint slot = atomicAdd(metadata[0].interfaceCollisionListCount, 1);
    if (slot < constants[0].maxInterfaceCollisionListCount) {
        // Avoid out of bounds memory access
        collisionsList[slot].ID0 = index0; // interfaceID0
        collisionsList[slot].ID1 = index1; // interfaceID1
    }
}

void collision_set_add(uint index0, uint index1) {
    atomicAdd(metadata[0].interfaceCollisionListCount, 1); // TODO remove - only for debugging reasons

    uint index = parameter.interfaceCollisionSetNewOffset + index0; // index determines the block for this entity
    uint slot;
    while(true) {
        slot = collisionsSet[index].offset; // check slot availability in this block
        if (slot < InterfaceCollisionBlockSize)
        { // Free slot available => just add collision entry
            collisionsSet[index].colls[slot] = index1;
            collisionsSet[index].offset++;
            return;
        }
        else if (slot > InterfaceCollisionBlockSize)
        { // This block is full; slot links to next block
            index = parameter.interfaceCollisionSetNewOffset + slot;
        }
        else // (slot == InterfaceCollisionBlockSize)
        { // All slots are full => allocate new ones
            slot = atomicAdd(metadata[0].interfaceCollisionSetCount, 1);
            if (slot < constants[0].maxInterfaceCollisionSetCount) {
                collisionsSet[index].offset = slot; // link old block to new block
                slot += parameter.interfaceCollisionSetNewOffset;
                collisionsSet[slot].colls[0] = index1;
                collisionsSet[slot].offset = 1;
            }
            return;
        }
    }
}

void link_up_event_list_add(uint index0, uint index1) {
    uint slot = atomicAdd(metadata[0].interfaceLinkUpListCount, 1);
    if (slot < constants[0].maxLinkEventCount) {
        // Avoid out of bounds memory access
        linkUpEvents[slot].ID0 = index0; // interfaceID0
        linkUpEvents[slot].ID1 = index1; // interfaceID1
    }
}

void link_down_event_list_add(uint index0, uint index1) {
    uint slot = atomicAdd(metadata[0].interfaceLinkDownListCount, 1);
    if (slot < constants[0].maxLinkEventCount) {
        // Avoid out of bounds memory access
        linkDownEvents[slot].ID0 = index0; // interfaceID0
        linkDownEvents[slot].ID1 = index1; // interfaceID1
    }
}

// Returns true if a collision between 'eID0' and 'eID1' is found in the HashSet at 'colSetOffset', false otherwise
bool find_collision(uint eID0, uint eID1, uint colSetOffset) {
    uint index = colSetOffset + eID0;
    while (true) {
        uint slot = collisionsSet[index].offset;
        for (uint i = 0; i < min(slot, InterfaceCollisionBlockSize); i++)
        { // Iterate all collisions in this block
            uint ID = collisionsSet[index].colls[i];
            if (ID == eID1)
            { // collision found
                return true;
            }
        }
        if (slot <= InterfaceCollisionBlockSize)
        { // no more linked blocks => not found
            return false;
        }
        // else this block links to another
        index = colSetOffset + slot;
    }
}

// Compares the collision detection sets of the previous tick (oldOffset) and
//  the current tick (newOffset) and determines differences.
// no coll -> no coll => still no connection (nothing to do)
//    coll ->    coll => connection still up (nothing to do)
// no coll ->    coll => link went up
//    coll -> no coll => link went down
void detect_connectivity(uint eID) {
    // Detect link up events
    const uint oldOff = parameter.interfaceCollisionSetOldOffset;
    const uint newOff = parameter.interfaceCollisionSetNewOffset;

    // Detect LinkUp events
    uint index = newOff + eID;
    while (true) {
        uint slot = collisionsSet[index].offset;
        for (uint i = 0; i < min(slot, InterfaceCollisionBlockSize); i++)
        { // Iterate all collisions in this block
            uint ID = collisionsSet[index].colls[i];
            if (!find_collision(eID, ID, oldOff))
            { // was not up, but is now up => link came up
                link_up_event_list_add(eID, ID);
            }
        }
        if (slot <= InterfaceCollisionBlockSize)
        { // no more linked blocks
            break;
        }
        // else this block links to another
        index = newOff + slot;
    }

    // Detect LinkDown events
    index = oldOff + eID;
    while (true) {
        uint slot = collisionsSet[index].offset;
        for (uint i = 0; i < min(slot, InterfaceCollisionBlockSize); i++)
        { // Iterate all collisions in this block
            uint ID = collisionsSet[index].colls[i];
            if (!find_collision(eID, ID, newOff))
            { // was up, but is now down => link went down
                link_down_event_list_add(eID, ID);
            }
        }
        if (slot <= InterfaceCollisionBlockSize)
        { // no more linked blocks
            break;
        }
        // else this block links to another
        index = oldOff + slot;
    }
}

// ------------------------------------------------------------------------------------
// Movement Logic
// ------------------------------------------------------------------------------------

// Move entity towards its next waypoint
// Returns the new position (does not change the position!)
vec2 move(uint index) {
    float time = parameter.timeIncrement; // Available time for movement
    vec2 pos = entities[index].pos;

    if (entities[index].targetWaypointOffset >= constants[0].waypointBufferSize) {
        // No waypoints available => stay stationary
        return pos;
    }
    
    uint oldOffset = entities[index].targetWaypointOffset;

    uint waypointIndex = index * constants[0].waypointBufferSize + entities[index].targetWaypointOffset;
    vec2 target = waypoints[waypointIndex].pos;
    float speed = waypoints[waypointIndex].speed;

    float dtt = length(target - pos); // distance to target
    float ttt = dtt / speed; // time to target

    while (time >= ttt) {
        // Entity can move past the next waypoint
        pos = target; // snap to waypoint
        time -= ttt;

        entities[index].targetWaypointOffset++;

        if (entities[index].targetWaypointOffset >= constants[0].waypointBufferSize) {
            // No waypoints available
            // => request more waypoints
            uint slot = atomicAdd(metadata[0].waypointRequestCount, 1);
            if (slot < constants[0].entityCount) { // Avoid out of bounds memory access
                waypointRequests[slot].ID0 = index; // entity ID
                waypointRequests[slot].ID1 = constants[0].waypointBufferSize; // number of requested waypoints
            }

            return pos; // => stay stationary
        }

        // Get next waypoint
        waypointIndex++;
        target = waypoints[waypointIndex].pos;
        speed = waypoints[waypointIndex].speed;
        dtt = length(target - pos);
        ttt = dtt / speed;
    }

    // Move towards the target
    vec2 dir = target - pos;
    float len = length(dir);
    if (len > 0) {
        dir = dir / len; // Normalize
        pos += dir * time;
    }

    // Keep at least waypointBufferThreshold waypoints in buffer
    if (constants[0].waypointBufferSize - oldOffset >= constants[0].waypointBufferThreshold && // only generate one request when falling below threshold
        constants[0].waypointBufferSize - entities[index].targetWaypointOffset < constants[0].waypointBufferThreshold) {
        // Fell below threshold
        // => request more waypoints
        uint slot = atomicAdd(metadata[0].waypointRequestCount, 1);
        if (slot < constants[0].entityCount) { // Avoid out of bounds memory access
            waypointRequests[slot].ID0 = index; // entity ID
            waypointRequests[slot].ID1 = entities[index].targetWaypointOffset; // number of requested waypoints
        }
    }

    return pos;
}

void main() {
    uint index = gl_GlobalInvocationID.x;

    if (index >= constants[0].entityCount) {
        return; // Local group invocation outside of global group size
        // Aka just ignore extra invocations
    }

    uint nodeID;
    uint entityCount;

    switch (parameter.pass) {

    case 0: /* Initialization Pass */
        break;

    case 1: /* Movement Pass */
        vec2 newPos = move(index);
        // Update entity position:
        entities[index].pos = newPos;
        break;

    case 2: /* Collision Detection List Pass */
        // Run collision detection, writing into the list buffer
        quad_tree_check_collisions(index);
        break;

    case 3: /* Collision Detection Set Pass */
        // Reset hashset buffer
        collisionsSet[parameter.interfaceCollisionSetNewOffset + index].offset = 0; // First available slot
        // Run collision detection, writing into the hashset buffer
        quad_tree_check_collisions(index);
        break;

    case 4: /* Connectivity Detection Pass */
        // Reset hashset buffer
        collisionsSet[parameter.interfaceCollisionSetNewOffset + index].offset = 0; // First available slot
        // Run collision detection, writing into the hashset buffer
        quad_tree_check_collisions(index);
        // Run connectivity detection
        detect_connectivity(index);
        break;

    case 5: // Build Quad Tree Init
        // Reset quad tree
        quadTreeEntities[index].next = 0; // reset ourself
        nodeID = quadTreeEntities[index].node; // home node
        quadTreeNodes[nodeID].first = constants[0].entityCount;

        // Reset all (parent) node counts
        while (nodeID != 0) {
            quadTreeNodes[nodeID].entityCount = 0;
            nodeID = quadTreeNodes[nodeID].parent;
        }

        quadTreeEntities[index].node = 0; // We start at root node

        break;

    case 6: // Build Quad Tree Step
        nodeID = quadTreeEntities[index].node;
        entityCount = quadTreeNodes[nodeID].entityCount;
        if (entityCount > constants[0].entityNodeCap) {
            // Too many entities in this node => move to a child node
            float offsetXNext = quadTreeNodes[nodeID].offsetX + (quadTreeNodes[nodeID].width / 2);
            float offsetYNext = quadTreeNodes[nodeID].offsetY + (quadTreeNodes[nodeID].height / 2);
            vec2 ePos = entities[index].pos;

            // All node siblings are next to each other in the buffer:
            // -----------
            // | TL | TR |
            // -----------  -->  [...|TL|TR|BL|BR|...]
            // | BL | BR |
            // -----------
            // => TL+1=TR, TL+2=BL, TL+3=BR, 

            uint right = uint(ePos.x >= offsetXNext);
            uint down = uint(ePos.y < offsetYNext) * 2;
            quadTreeEntities[index].node = quadTreeNodes[nodeID].nextTL + right + down;

            nodeID = quadTreeEntities[index].node;
            atomicAdd(quadTreeNodes[nodeID].entityCount, 1);
        }
        break;

    case 7: // Build Quad Tree Fini
        nodeID = quadTreeEntities[index].node;
        
        // Copy position
        quadTreeEntities[index].pos = entities[index].pos;
        
        // We arrived at our final node => add ourselves to this nodes linked-list
        uint first = quadTreeNodes[nodeID].first;
        do {
            quadTreeEntities[index].next = first;
            first = atomicCompSwap(quadTreeNodes[nodeID].first, quadTreeEntities[index].next, index);
        } while (first != quadTreeEntities[index].next);

        break;
    }

}
